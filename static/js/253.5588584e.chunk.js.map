{"version":3,"file":"static/js/253.5588584e.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","constants/constants.js","pages/Movies/Movies.styled.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus{\n    transform: scale(1.03);\n  };\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px; \n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: gray;\n  font-size: 12px; \n  font-weight: 600;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MoviesCard, StyledLink, MoviesImg, MoviesCardInfo, MoviesTitle, MoviesVote } from \"./MoviesItem.styled\";\n\n/*  \"MoviesItem\" використовує \"useLocation\" для отримання \nшляху до поточної сторінки та зберігає його у змінній \"fromPage\" */\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <MoviesCard>\n            <StyledLink to={`/movies/${id}`} state={{from: fromPage}}>\n                <MoviesImg src={imagePath} alt={title} />\n                <MoviesCardInfo>\n                    <MoviesTitle>{title}</MoviesTitle>\n                    <MoviesVote>{vote}\n                    </MoviesVote>\n                </MoviesCardInfo>\n            </StyledLink>\n        </MoviesCard>\n    );\n};\n\nMoviesItem.propTypes = {\n    // id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    // vote: PropTypes.number.isRequired,\n}","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;\n","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;","import styled from \"styled-components\";\n\nexport const FormContainer = styled.div`\n    padding: 16px 0;\n`;\n\nexport const Form = styled.form`\n    position: relative;\n    width: 100%;\n    max-width: 350px;\n    margin: 0 auto;\n    border-radius: 4px;\n    overflow: hidden;\n`;\n\nexport const FormInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    height: 33px;\n    font-size: 18px;\n    border: 1px solid black;\n    border-radius: 4px;\n    outline: none;\n    padding: 4px;\n::placeholder {\n    font: inherit;\n    font-size: 16px;\n}\n`;\n\nexport const FormButton = styled.button`\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 100%;\n    display: inline-block;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-right: 6px;\n    padding-left: 7px;\n    cursor: pointer;\n    border: 1px solid gray;\n    outline: none;\n    \n    color: white;\n    background-color: gray;\n    opacity: 1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n:hover,\n:focus {\n    opacity: 0.7;\n}\n`;","import { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport { BiSearch } from 'react-icons/bi';\nimport { FormContainer, Form, FormInput, FormButton } from \"./SearchForm.styled\";\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({onSubmit, onChange}) => {\n  const [query, setQuery] = useState('');\n\n  /* handleQueryChange викликається при зміні значення в \n  полі вводу і оновлює стейт query, а також передає \n  змінене значення до батьківського компонента за допомогою \n  функції onChange */\n  const handleQueryChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n    onChange(e.currentTarget.value.toLowerCase());\n  };\n\n  /* handleSubmit викликається при поданні форми і передає\n   значення запиту до батьківського компонента за допомогою\n   функції onSubmit. Перед виконанням перевіряє, чи введено\n   значення запиту і виводить повідомлення, якщо ні */ \n  const handleSubmit = e => {\n    e.preventDefault();\n    \n    if (query.trim() === '') {\n      return toast.warn('Enter your query in the search bar!');\n    };    \n\n    onSubmit(query);\n    setQuery('');\n  };\n  \n  return (\n    <FormContainer>\n      <Form onSubmit={handleSubmit}>\n        <FormInput\n          type=\"text\"\n          name=\"query\" \n          value={query}        \n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleQueryChange}        \n        />\n\n        <FormButton type=\"submit\">\n          <BiSearch size={23}/>\n        </FormButton>\n      </Form>\n    </FormContainer>\n  );\n};\n\nSearchForm.propsType = {\n  onSubmit: PropTypes.func.isRequired,\n}","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport API from '../../services/api';\nimport { toast } from 'react-toastify';\nimport { MoviesList } from './Movies.styled';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesItem } from 'components/MoviesItem/MoviesItem';\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\n\n// компонент фільмів\nconst Movies = () => {\n  // використовуємо хуки React для створення та оновлення станів\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // використовуємо useEffect, щоб отримати фільми при кожному оновленні search query\n  useEffect(() => {\n    if (!query) {\n      // Якщо query є порожньою строкою, то не виконуємо запит до API\n      return;\n    }\n    setIsLoading(true);\n    getSearchMovies();\n\n    async function getSearchMovies() {\n      try {\n        // запит до API за фільмами зі введеною search query\n        const fetchMovies = await API.fetchSearchMovies(query);\n        // console.log(fetchMovies);\n        // оновлюємо список фільмів\n        setMovies(fetchMovies);\n      } catch (error) {\n        // console.log(error);\n        // повідомляємо користувача, що не знайдено фільмів за даним запитом\n        toast.error(\n          `Sorry, there are no movies matching your search query. Please try again.`\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [query]);\n\n  // обробник події для подання форми пошуку\n  const handleFormSubmit = query => {\n    // console.log(query);\n\n    // оновлюємо search query та список фільмів\n    setQuery(query);\n    setMovies([]);\n  };\n\n  // оновлюємо search query в адресному рядку браузера\n  const updateQueryString = value => {\n    setSearchParams(value !== '' ? { search: value } : {});\n  };\n\n  return (\n    <main>\n      <SearchForm onSubmit={handleFormSubmit} onChange={updateQueryString} />\n      {isLoading && <Loader />}\n      <MoviesList>\n        {movies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_average ? vote_average.toFixed(1) : `No vote`}\n          />\n        ))}\n      </MoviesList>\n      {/* <Outlet /> */}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'd03486e90ea71f6c430633f88c8a426b',\n    language: 'en-US',\n  },\n});\n\n// функція, яка отримує список актуальних фільмів за добу з TMDb та повертає їх у вигляді масиву об'єктів\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//функція, яка отримує деталі конкретного фільму за його id та повертає їх у вигляді об'єкта\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//функція, яка шукає фільми за заданим запитом та повертає їх у вигляді масиву об'єктів\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// функція, яка отримує каст фільму за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// функція, яка отримує рецензії на фільм за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//об'єкт, що містить всі функції, які можна використовувати для звернень до API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","MoviesList","FormContainer","Form","FormInput","FormButton","SearchForm","onSubmit","onChange","useState","query","setQuery","e","preventDefault","trim","toast","type","name","value","autoComplete","autoFocus","placeholder","currentTarget","toLowerCase","size","propsType","PropTypes","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","getSearchMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","response","trendingMovies","data","results","length","Error","searchMovies","cast","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}