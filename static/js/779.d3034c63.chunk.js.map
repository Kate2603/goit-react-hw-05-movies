{"version":3,"file":"static/js/779.d3034c63.chunk.js","mappings":"wRAEaA,EAAcC,EAAAA,GAAAA,GAAH,uFAMXC,EAAcD,EAAAA,GAAAA,GAAH,4PAWXE,EAAeF,EAAAA,GAAAA,GAAH,gDAIZG,EAAUH,EAAAA,GAAAA,EAAH,4C,SCuBpB,EApCgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OATAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAC6BC,EAAAA,EAAAA,kBAAsBN,GADnD,OACQO,EADR,OAGEH,EAAWG,GAHb,4CAFc,0DACdC,EAMD,GAAE,CAACR,KAGF,gCACGG,EAAQM,OAAS,GAChB,SAACd,EAAD,UACGQ,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAChB,EAAD,YACE,UAACC,EAAD,sBAAuBc,MACvB,uBAAIC,MAFYF,EADP,OAQf,SAACZ,EAAD,wDAEF,SAAC,KAAD,MAGL,C,wDC3CKe,E,QAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,W,aAKd,O,oBAAA,sGACyBL,EAAYM,IAAI,sBADzC,UACQC,EADR,QAGQC,EAAiBD,EAASE,KAAKC,SAEjBf,OALtB,sBAMU,IAAIgB,MAAJ,+BANV,gCASSH,GATT,kE,aAaA,O,oBAAA,WAA8BX,GAA9B,yFACyBG,EAAYM,IAAZ,gBAAyBT,IADlD,uBACUY,EADV,EACUA,KADV,kBAGSA,GAHT,kE,aAOA,O,oBAAA,WAAiCG,GAAjC,yFACyBZ,EAAYM,IAAZ,6BAAsCM,IAD/D,UACQL,EADR,QAGQM,EAAeN,EAASE,KAAKC,SAEjBf,OALpB,sBAMU,IAAIgB,MAAJ,4EANV,gCAWSE,GAXT,kE,aAeA,O,oBAAA,WAAiChB,GAAjC,yFACyBG,EAAYM,IAAZ,gBAAyBT,EAAzB,aADzB,UACQU,EADR,QAGQO,EAAOP,EAASE,KAAKK,MAEjBnB,OALZ,sBAMU,IAAIgB,MAAJ,qBANV,gCASSG,GATT,kE,aAaA,O,oBAAA,WAAiCjB,GAAjC,yFACyBG,EAAYM,IAAZ,gBAAyBT,EAAzB,aADzB,cACQU,EADR,OAGQlB,EAAUkB,EAASE,KAAKC,QAHhC,kBAKSrB,GALT,kEASA,IAAM0B,EAAM,CACVC,oB,WA1DaA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2DbC,eA3DF,SAa8B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA+CbC,kBA/CF,SAOiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCbC,kBAzCF,SAeiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2BbC,kBA3BF,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,K","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsList = styled.ul`\n  padding: 16px 0;\n  list-style: disc;\n  margin-left: 10px;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #EEEEEE;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n`;\n\nexport const ReviewsTitle = styled.h4`\n  margin-bottom: 10px;\n`;\n\nexport const Message = styled.p`\n  padding: 16px 0;\n`;","import { useState, useEffect } from 'react';\nimport { useParams, Outlet } from 'react-router-dom';\nimport API from '../../services/api';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsTitle,\n  Message,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  /* useEffect() виконує функцію \"getMovieReviews\" при \n  кожному оновленні компонента. У цій функції запитуються \n  відгуки про фільм з API за допомогою методу \n  \"fetchMovieReviews\" з імпортованої API. Отримані \n  відгуки зберігаються в стані за допомогою setReviews(). */\n  useEffect(() => {\n    getMovieReviews();\n    async function getMovieReviews() {\n      const fetchReviews = await API.fetchMovieReviews(movieId);\n      // console.log(fetchReviews);\n      setReviews(fetchReviews);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <ReviewsTitle>Author: {author}</ReviewsTitle>\n              <p>{content}</p>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <Message>We don't have any reviews for this movie</Message>\n      )}\n      <Outlet />\n    </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'd03486e90ea71f6c430633f88c8a426b',\n    language: 'en-US',\n  },\n});\n\n// функція, яка отримує список актуальних фільмів за добу з TMDb та повертає їх у вигляді масиву об'єктів\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//функція, яка отримує деталі конкретного фільму за його id та повертає їх у вигляді об'єкта\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//функція, яка шукає фільми за заданим запитом та повертає їх у вигляді масиву об'єктів\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// функція, яка отримує каст фільму за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// функція, яка отримує рецензії на фільм за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//об'єкт, що містить всі функції, які можна використовувати для звернень до API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsTitle","Message","movieId","useParams","useState","reviews","setReviews","useEffect","API","fetchReviews","getMovieReviews","length","map","id","author","content","apiInstance","axios","baseURL","params","api_key","language","get","response","trendingMovies","data","results","Error","query","searchMovies","cast","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}