{"version":3,"file":"static/js/304.653cf5b6.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","constants/constants.js","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus{\n    transform: scale(1.03);\n  };\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px; \n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: gray;\n  font-size: 12px; \n  font-weight: 600;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MoviesCard, StyledLink, MoviesImg, MoviesCardInfo, MoviesTitle, MoviesVote } from \"./MoviesItem.styled\";\n\n/*  \"MoviesItem\" використовує \"useLocation\" для отримання \nшляху до поточної сторінки та зберігає його у змінній \"fromPage\" */\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <MoviesCard>\n            <StyledLink to={`/movies/${id}`} state={{from: fromPage}}>\n                <MoviesImg src={imagePath} alt={title} />\n                <MoviesCardInfo>\n                    <MoviesTitle>{title}</MoviesTitle>\n                    <MoviesVote>{vote}\n                    </MoviesVote>\n                </MoviesCardInfo>\n            </StyledLink>\n        </MoviesCard>\n    );\n};\n\nMoviesItem.propTypes = {\n    // id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    // vote: PropTypes.number.isRequired,\n}","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import styled from \"styled-components\";\n\nexport const HomeTitle = styled.h2`\n  padding-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;","import { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport API from '../../services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { HomeTitle, MoviesList } from './Home.styled';\nimport { MoviesItem } from 'components/MoviesItem/MoviesItem';\n\nconst Home = () => {\n  /* Створюємо стан для списку популярних фільмів та індикатора завантаження */\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /* Використовуємо хук useEffect для отримання списку \n  популярних фільмів при завантаженні сторінки */\n  useEffect(() => {\n    setIsLoading(true); // Встановлюємо індикатор завантаження\n    getTrendinngMovies(); // Отримуємо список популярних фільмів\n\n    async function getTrendinngMovies() {\n      try {\n        const fetchMovies = await API.fetchTrendingMovies();\n        // console.log(fetchMovies);\n        setTrendingMovies(fetchMovies); // Оновлюємо стан зі списком фільмів\n      } catch (error) {\n        // Обробляємо помилки виконання запиту до API\n        // console.log(error);\n      } finally {\n        setIsLoading(false); // Вимикаємо індикатор завантаження\n      }\n    }\n  }, []); // Передаємо пустий масив залежностей, щоб хук виконався тільки при завантаженні сторінки\n\n  return (\n    <main>\n      <HomeTitle>Trending today</HomeTitle>\n\n      {isLoading && <Loader />}\n\n      <MoviesList>\n        {trendingMovies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_average ? vote_average.toFixed(1) : `No vote`}\n          />\n        ))}\n      </MoviesList>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'd03486e90ea71f6c430633f88c8a426b',\n    language: 'en-US',\n  },\n});\n\n// функція, яка отримує список актуальних фільмів за добу з TMDb та повертає їх у вигляді масиву об'єктів\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//функція, яка отримує деталі конкретного фільму за його id та повертає їх у вигляді об'єкта\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//функція, яка шукає фільми за заданим запитом та повертає їх у вигляді масиву об'єктів\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// функція, яка отримує каст фільму за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// функція, яка отримує рецензії на фільм за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//об'єкт, що містить всі функції, які можна використовувати для звернень до API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","HomeTitle","MoviesList","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","getTrendinngMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","get","response","data","results","length","Error","query","searchMovies","cast","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}