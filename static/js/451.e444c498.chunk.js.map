{"version":3,"file":"static/js/451.e444c498.chunk.js","mappings":"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","sources":["components/Cast/CastItem/CastItem.styled.js","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","constants/constants.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CardWrapper = styled.li`\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), \n   0 1px 1px 0 rgb(0 0 0 / 14%),\n   0 2px 1px -1px rgb(0 0 0 / 12%);\n`;\n\nexport const CardImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const CardInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 4px;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const CardText = styled.p`\n  margin-top: auto;\n`;","import PropTypes from 'prop-types';\nimport { CardWrapper, CardImg, CardInfo, CardText } from './CastItem.styled';\n\nexport const CastItem = ({ imagePath, name, character}) => {\n    return (\n        <CardWrapper>\n            <CardImg src={imagePath} alt={name} width=\"100\" />\n\n            <CardInfo>\n                <h4>{name}</h4>\n                <CardText>Character:<br />{character}</CardText>\n            </CardInfo>\n        </CardWrapper>\n    );\n};\n\nCastItem.propTypes = {\n    imagePath: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  padding: 16px 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 16px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from '../../services/api';\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { CastItem } from './CastItem/CastItem';\nimport { CastList } from './Cast.styled';\n\nconst Cast = () => {\n  /*  \"movieId\" отримується з URL-адреси за допомогою хука \"useParams\" */\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  /* \"useEffect\" викликає функцію \"getMovieCredits\" при \n  кожній зміні значення \"movieId\". Ця функція отримує \n  список акторів з API за допомогою функції \n  \"fetchMovieCredits\", обрізає список до перших 16 акторів\n   та оновлює стан \"cast\". */\n  useEffect(() => {\n    getMovieCredits();\n\n    async function getMovieCredits() {\n      try {\n        const fetchCast = await API.fetchMovieCredits(movieId);\n\n        const actors =\n          fetchCast.length > 16 ? fetchCast.slice(0, 16) : fetchCast;\n        // console.log(actors);\n        setCast(actors);\n      } catch (error) {\n        // console.log(error);\n      }\n    }\n  }, [movieId]);\n\n  /*  перевіряm, чи є список акторів відомим і, якщо ні, то повертає null */\n  if (!cast) return null;\n\n  return (\n    <CastList>\n      {cast.map(({ id, profile_path, original_name, character }) => (\n        <CastItem\n          key={id}\n          imagePath={\n            profile_path ? BASE_IMAGE_URL + profile_path : PlACEHOLDER_IMAGE_URL\n          }\n          name={original_name}\n          character={character}\n        />\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: '157ba8f88df5d741a5271cb474478bff',\n        language: 'en-US',\n    },\n});\n\n// функція, яка отримує список актуальних фільмів за добу з TMDb та повертає їх у вигляді масиву об'єктів\nasync function fetchTrendingMovies() {\n    const response = await apiInstance.get('trending/movie/day');\n     \n    const trendingMovies = response.data.results;\n\n    if (!trendingMovies.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return trendingMovies;\n};\n\n//функція, яка отримує деталі конкретного фільму за його id та повертає їх у вигляді об'єкта\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\n//функція, яка шукає фільми за заданим запитом та повертає їх у вигляді масиву об'єктів\nasync function fetchSearchMovies(query) {\n    const response = await apiInstance.get(`search/movie?query=${query}`);\n\n    const searchMovies = response.data.results;\n\n    if (!searchMovies.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return searchMovies;\n}\n\n// функція, яка отримує каст фільму за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\n// функція, яка отримує рецензії на фільм за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\n//об'єкт, що містить всі функції, які можна використовувати для звернень до API\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["CardWrapper","styled","CardImg","CardInfo","CardText","CastItem","imagePath","name","character","src","alt","width","CastList","movieId","useParams","useState","cast","setCast","useEffect","API","fetchCast","actors","length","slice","getMovieCredits","map","id","profile_path","original_name","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","response","trendingMovies","data","results","Error","query","searchMovies","fetchMovieReviews","reviews","api","fetchMovieById","fetchSearchMovies","fetchMovieCredits"],"sourceRoot":""}