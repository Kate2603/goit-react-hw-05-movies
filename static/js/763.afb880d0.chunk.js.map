{"version":3,"file":"static/js/763.afb880d0.chunk.js","mappings":"wNAAO,IAAMA,EAAc,kCACdC,EAAqB,sCACrBC,EAAsB,kC,sMCCtBC,EAAWC,EAAAA,GAAAA,IAAH,qGAMRC,EAAWD,EAAAA,GAAAA,IAAH,wIAMRE,EAAYF,EAAAA,GAAAA,IAAH,iIAQTG,EAAcH,EAAAA,GAAAA,GAAH,uDAKXI,EAAqBJ,EAAAA,GAAAA,IAAH,sGAMlBK,EAAuBL,EAAAA,GAAAA,GAAH,gDAIpBM,EAAsBN,EAAAA,GAAAA,GAAH,4GAOnBO,GAAOP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,8U,UC1CJS,GAAaT,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,mU,SCCVU,EAAa,SAAC,GAAkB,IAAD,IAAfC,EAAe,EAAfA,SAWnBC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OAAO,UAACN,EAAD,CAAYO,GAAIJ,EAAhB,WACH,SAAC,MAAD,CAAaK,KAAM,KAClBN,IACR,ECsFD,EA1FqB,WAEnB,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA6BT,EAAAA,EAAAA,MAArBU,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACZC,EAAQ,UAAMF,GAAN,OAAiBC,GAkB/B,IAfAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,6GAE6BC,EAAAA,EAAAA,eAAmBC,OAAOV,IAFvD,OAEUW,EAFV,OAIIP,EAASO,GAJb,wGAHc,0DACdC,EAWD,GAAE,CAACZ,KAGCG,EACH,OAAO,KAIT,IAAQU,EACNV,EADMU,YAAaC,EACnBX,EADmBW,MAAOC,EAC1BZ,EAD0BY,aAAcC,EACxCb,EADwCa,SAAUC,EAClDd,EADkDc,OAAQC,EAC1Df,EAD0De,aAItDC,EAAYN,EACdnC,EAAAA,GAAiBmC,EACjBjC,EAAAA,GAGEwC,EAAOF,EAAeA,EAAaG,MAAM,EAAG,GAAzB,UAOzB,OACE,6BACE,SAAC7B,EAAD,uBAEA,UAACX,EAAD,YACE,SAACE,EAAD,CAAUuC,IAAKH,EAAWI,IAAKT,EAAOU,MAAM,SAC5C,UAACxC,EAAD,YACE,0BACG8B,GACD,iCAASM,EAAT,WAEF,uCAdCK,KAAKC,MAAqB,GAAfX,GAcZ,QACA,sCACA,uBAAIC,KACJ,oCACA,SAAC/B,EAAD,iBACGgC,QADH,IACGA,OADH,EACGA,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACX,wBAAcA,GAALD,EADE,aAOnB,UAAC1C,EAAD,YACE,SAACC,EAAD,qCACA,UAACC,EAAD,YACE,yBACE,SAACC,EAAD,CAAMS,GAAG,OAAOF,MAAO,CAAEC,KAAMU,GAA/B,qBAIF,yBACE,SAAClB,EAAD,CAAMS,GAAG,UAAUF,MAAO,CAAEC,KAAMU,GAAlC,8BAON,SAAC,EAAAuB,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C,wDCtGKC,E,QAAcC,EAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAKHC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGAC2BN,EAAYO,IAAI,sBAD3C,UACUC,EADV,QAGUC,EAAiBD,EAASE,KAAKC,SAEjBC,OALxB,sBAMc,IAAIC,MAAJ,+BANd,gCASWJ,GATX,kE,aAaA,O,oBAAA,WAA8Bb,GAA9B,yFAC2BI,EAAYO,IAAZ,gBAAyBX,IADpD,uBACYc,EADZ,EACYA,KADZ,kBAGWA,GAHX,kE,aAOA,O,oBAAA,WAAiCI,GAAjC,yFAC2Bd,EAAYO,IAAZ,6BAAsCO,IADjE,UACUN,EADV,QAGUO,EAAeP,EAASE,KAAKC,SAEjBC,OALtB,sBAMc,IAAIC,MAAJ,4EANd,gCASWE,GATX,kE,aAaA,O,oBAAA,WAAiCnB,GAAjC,yFAC2BI,EAAYO,IAAZ,gBAAyBX,EAAzB,aAD3B,UACUY,EADV,QAGUQ,EAAOR,EAASE,KAAKM,MAEjBJ,OALd,sBAMc,IAAIC,MAAJ,qBANd,gCASWG,GATX,kEAaeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCrB,GAAjC,yFAC2BI,EAAYO,IAAZ,gBAAyBX,EAAzB,aAD3B,cACUY,EADV,OAGUU,EAAUV,EAASE,KAAKC,QAHlC,kBAKWO,GALX,kEASA,IAAMC,EAAM,CACRb,oB,WAxDWA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyDXc,e,SA5C0B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA6CXC,kBA7CJ,SAOiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAuCXC,kBAvCJ,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2BXL,kBA3BJ,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,K","sources":["constants/constants.js","pages/MovieDetails/MovieDetails.styled.js","components/BackButton/BackButton.styled.js","components/BackButton/BackButton.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const MovieBox = styled.div`\n  display: flex;\n  padding: 0 0 16px 0;\n  border-bottom: 1px solid black;\n`;\n\nexport const MovieImg = styled.img`\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n  padding: 20px;\n`;\n\nexport const MovieGenres = styled.ul`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const MovieAdditionalBox = styled.div`\n  padding: 16px 0;\n  border-bottom: 1px solid black;\n  text-align: center;\n`;\n\nexport const MovieAdditionalTitle = styled.h2`\n  margin-bottom: 12px;\n`;\n\nexport const MovieAdditionalList = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  color: black;\n  font-weight: 500;\n  font-size: 16px;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  \n  &.active {\n    color: white;\n    background-color: gray;\n  }\n  :hover:not(.active),\n  :focus-visible:not(.active){\n    color: gray;\n  }\n`;","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 16px 0 8px 0;\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 16px;\n  text-transform: uppercase;\n  color: black;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n          \n:hover{\n  color: gray;\n}\n`;","import { useLocation } from \"react-router-dom\";\nimport { BsArrowLeft } from \"react-icons/bs\";\nimport { StyledLink } from \"./BackButton.styled\";\n\nexport const BackButton = ({ children }) => {\n    /*  з використанням функції useLocation(), отримується\n     поточний URL сторінки та зберігається в змінній \n     location. Далі, за допомогою оператора ?., \n     звертаємось до властивості state зі змінної location,\n      що містить інформацію про попередню сторінку. Якщо \n      така інформація є, то отримуємо URL попередньої \n      сторінки та зберігаємо його в змінну backLinkHref. \n      Якщо ж інформація відсутня, то встановлюємо URL \n      сторінки за замовчуванням (\"/\"). */\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/\";\n\n    return <StyledLink to={backLinkHref}>\n        <BsArrowLeft size={16} />\n        {children}</StyledLink>\n};","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport API from '../../services/api';\nimport { BASE_IMAGE_URL, PlACEHOLDER_POSTER_URL } from 'constants/constants';\nimport {\n  MovieBox,\n  MovieImg,\n  MovieInfo,\n  MovieAdditionalBox,\n  MovieGenres,\n  MovieAdditionalTitle,\n  MovieAdditionalList,\n  Link,\n} from './MovieDetails.styled';\nimport { BackButton } from 'components/BackButton/BackButton';\n\nconst MovieDetails = () => {\n  // Використовуємо хуки для отримання movieId та поточного шляху роутера\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  // Використовуємо хук useEffect для отримання даних про фільм з API\n  useEffect(() => {\n    getMovieById();\n\n    async function getMovieById() {\n      try {\n        const fetchMovie = await API.fetchMovieById(Number(movieId));\n        // console.log(fetchMovie);\n        setMovie(fetchMovie);\n      } catch (error) {\n        // console.log(error);\n      }\n    }\n  }, [movieId]);\n\n  // Якщо дані про фільм ще не завантажилися, повертаємо null\n  if (!movie) {\n    return null;\n  }\n\n  // Витягуємо дані про фільм\n  const { poster_path, title, vote_average, overview, genres, release_date } =\n    movie;\n\n  // Формуємо URL для зображення фільму\n  const imagePath = poster_path\n    ? BASE_IMAGE_URL + poster_path\n    : PlACEHOLDER_POSTER_URL;\n\n  // Витягуємо рік виходу фільму\n  const year = release_date ? release_date.slice(0, 4) : `No year`;\n\n  // Функція для розрахунку рейтингу фільму в процентах\n  const userScore = () => {\n    return Math.round(vote_average * 10);\n  };\n\n  return (\n    <main>\n      <BackButton>Go back</BackButton>\n\n      <MovieBox>\n        <MovieImg src={imagePath} alt={title} width=\"200\" />\n        <MovieInfo>\n          <h2>\n            {title}\n            <span> ({year})</span>\n          </h2>\n          <p>User Score {userScore()}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <MovieGenres>\n            {genres?.map(({ id, name }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </MovieGenres>\n        </MovieInfo>\n      </MovieBox>\n\n      <MovieAdditionalBox>\n        <MovieAdditionalTitle>Additional infomation</MovieAdditionalTitle>\n        <MovieAdditionalList>\n          <li>\n            <Link to=\"cast\" state={{ from: fromPage }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: fromPage }}>\n              Reviews\n            </Link>\n          </li>\n        </MovieAdditionalList>\n      </MovieAdditionalBox>\n\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: '157ba8f88df5d741a5271cb474478bff',\n        language: 'en-US',\n    },\n});\n\n// функція, яка отримує список актуальних фільмів за добу з TMDb та повертає їх у вигляді масиву об'єктів\nasync function fetchTrendingMovies() {\n    const response = await apiInstance.get('trending/movie/day');\n     \n    const trendingMovies = response.data.results;\n\n    if (!trendingMovies.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return trendingMovies;\n};\n\n//функція, яка отримує деталі конкретного фільму за його id та повертає їх у вигляді об'єкта\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\n//функція, яка шукає фільми за заданим запитом та повертає їх у вигляді масиву об'єктів\nasync function fetchSearchMovies(query) {\n    const response = await apiInstance.get(`search/movie?query=${query}`);\n\n    const searchMovies = response.data.results;\n\n    if (!searchMovies.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return searchMovies;\n}\n\n// функція, яка отримує каст фільму за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\n// функція, яка отримує рецензії на фільм за його id та повертає їх у вигляді масиву об'єктів\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\n//об'єкт, що містить всі функції, які можна використовувати для звернень до API\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","MovieBox","styled","MovieImg","MovieInfo","MovieGenres","MovieAdditionalBox","MovieAdditionalTitle","MovieAdditionalList","Link","NavLink","StyledLink","BackButton","children","backLinkHref","useLocation","state","from","to","size","movieId","useParams","useState","movie","setMovie","pathname","search","fromPage","useEffect","API","Number","fetchMovie","getMovieById","poster_path","title","vote_average","overview","genres","release_date","imagePath","year","slice","src","alt","width","Math","round","map","id","name","Suspense","fallback","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","response","trendingMovies","data","results","length","Error","query","searchMovies","cast","fetchMovieReviews","reviews","api","fetchMovieById","fetchSearchMovies","fetchMovieCredits"],"sourceRoot":""}